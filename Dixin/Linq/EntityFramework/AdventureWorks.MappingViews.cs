//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System.Data.Entity.Infrastructure.MappingViews;

[assembly: DbMappingViewCacheTypeAttribute(
    typeof(Dixin.Linq.EntityFramework.AdventureWorks),
    typeof(Edm_EntityMappingGeneratedViews.ViewsForBaseEntitySets128df371da44af4d60422adf7b6269ee47d5b14949c2653c73087c1848232580))]

namespace Edm_EntityMappingGeneratedViews
{
    using System;
    using System.CodeDom.Compiler;
    using System.Data.Entity.Core.Metadata.Edm;

    /// <summary>
    /// Implements a mapping view cache.
    /// </summary>
    [GeneratedCode("Entity Framework Power Tools", "0.9.0.0")]
    internal sealed class ViewsForBaseEntitySets128df371da44af4d60422adf7b6269ee47d5b14949c2653c73087c1848232580 : DbMappingViewCache
    {
        /// <summary>
        /// Gets a hash value computed over the mapping closure.
        /// </summary>
        public override string MappingHashValue
        {
            get { return "128df371da44af4d60422adf7b6269ee47d5b14949c2653c73087c1848232580"; }
        }

        /// <summary>
        /// Gets a view corresponding to the specified extent.
        /// </summary>
        /// <param name="extent">The extent.</param>
        /// <returns>The mapping view, or null if the extent is not associated with a mapping view.</returns>
        public override DbMappingView GetView(EntitySetBase extent)
        {
            if (extent == null)
            {
                throw new ArgumentNullException("extent");
            }

            var extentName = extent.EntityContainer.Name + "." + extent.Name;

            if (extentName == "CodeFirstDatabase.vProductAndDescription")
            {
                return GetView0();
            }

            if (extentName == "AdventureWorks.ProductAndDescriptions")
            {
                return GetView1();
            }

            if (extentName == "CodeFirstDatabase.ProductCategory")
            {
                return GetView2();
            }

            if (extentName == "CodeFirstDatabase.ProductSubcategory")
            {
                return GetView3();
            }

            if (extentName == "CodeFirstDatabase.Product")
            {
                return GetView4();
            }

            if (extentName == "CodeFirstDatabase.ProductProductPhoto")
            {
                return GetView5();
            }

            if (extentName == "CodeFirstDatabase.ProductPhoto")
            {
                return GetView6();
            }

            if (extentName == "AdventureWorks.ProductCategories")
            {
                return GetView7();
            }

            if (extentName == "AdventureWorks.ProductSubcategories")
            {
                return GetView8();
            }

            if (extentName == "AdventureWorks.Products")
            {
                return GetView9();
            }

            if (extentName == "AdventureWorks.ProductProductPhotoes")
            {
                return GetView10();
            }

            if (extentName == "AdventureWorks.ProductPhotos")
            {
                return GetView11();
            }

            return null;
        }

        /// <summary>
        /// Gets the view for CodeFirstDatabase.vProductAndDescription.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView0()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing vProductAndDescription
        [CodeFirstDatabaseSchema.vProductAndDescription](T1.vProductAndDescription_ProductID, T1.vProductAndDescription_Name, T1.vProductAndDescription_ProductModel, T1.vProductAndDescription_CultureID, T1.vProductAndDescription_Description)
    FROM (
        SELECT 
            T.ProductID AS vProductAndDescription_ProductID, 
            T.Name AS vProductAndDescription_Name, 
            T.ProductModel AS vProductAndDescription_ProductModel, 
            T.CultureID AS vProductAndDescription_CultureID, 
            T.Description AS vProductAndDescription_Description, 
            True AS _from0
        FROM AdventureWorks.ProductAndDescriptions AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for AdventureWorks.ProductAndDescriptions.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView1()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing ProductAndDescriptions
        [Dixin.Linq.EntityFramework.vProductAndDescription](T1.vProductAndDescription_ProductID, T1.vProductAndDescription_Name, T1.vProductAndDescription_ProductModel, T1.vProductAndDescription_CultureID, T1.vProductAndDescription_Description)
    FROM (
        SELECT 
            T.ProductID AS vProductAndDescription_ProductID, 
            T.Name AS vProductAndDescription_Name, 
            T.ProductModel AS vProductAndDescription_ProductModel, 
            T.CultureID AS vProductAndDescription_CultureID, 
            T.Description AS vProductAndDescription_Description, 
            True AS _from0
        FROM CodeFirstDatabase.vProductAndDescription AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for CodeFirstDatabase.ProductCategory.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView2()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing ProductCategory
        [CodeFirstDatabaseSchema.ProductCategory](T1.ProductCategory_ProductCategoryID, T1.ProductCategory_Name)
    FROM (
        SELECT 
            T.ProductCategoryID AS ProductCategory_ProductCategoryID, 
            T.Name AS ProductCategory_Name, 
            True AS _from0
        FROM AdventureWorks.ProductCategories AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for CodeFirstDatabase.ProductSubcategory.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView3()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing ProductSubcategory
        [CodeFirstDatabaseSchema.ProductSubcategory](T1.ProductSubcategory_ProductSubcategoryID, T1.ProductSubcategory_Name, T1.ProductSubcategory_ProductCategoryID)
    FROM (
        SELECT 
            T.ProductSubcategoryID AS ProductSubcategory_ProductSubcategoryID, 
            T.Name AS ProductSubcategory_Name, 
            T.ProductCategoryID AS ProductSubcategory_ProductCategoryID, 
            True AS _from0
        FROM AdventureWorks.ProductSubcategories AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for CodeFirstDatabase.Product.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView4()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing Product
        [CodeFirstDatabaseSchema.Product](T2.Product_ProductID, T2.Product_RowVersion, T2.Product_Name, T2.Product_ListPrice, T2.Product_ProductSubcategoryID, T2.Product_Style)
    FROM (
        SELECT -- Constructing Style
            T1.Product_ProductID, 
            T1.Product_RowVersion, 
            T1.Product_Name, 
            T1.Product_ListPrice, 
            T1.Product_ProductSubcategoryID, 
            CASE
                WHEN T1._from1 THEN N'M'
                WHEN T1._from2 THEN N'U'
                WHEN T1._from3 THEN N'W'
            END AS Product_Style
        FROM (
            SELECT 
                T.ProductID AS Product_ProductID, 
                T.RowVersion AS Product_RowVersion, 
                T.Name AS Product_Name, 
                T.ListPrice AS Product_ListPrice, 
                T.ProductSubcategoryID AS Product_ProductSubcategoryID, 
                True AS _from0, 
                CASE WHEN T IS OF (ONLY [Dixin.Linq.EntityFramework.MensProduct]) THEN True ELSE False END AS _from1, 
                CASE WHEN T IS OF (ONLY [Dixin.Linq.EntityFramework.UniversalProduct]) THEN True ELSE False END AS _from2, 
                CASE WHEN T IS OF (ONLY [Dixin.Linq.EntityFramework.WomensProduct]) THEN True ELSE False END AS _from3
            FROM AdventureWorks.Products AS T
        ) AS T1
    ) AS T2");
        }

        /// <summary>
        /// Gets the view for CodeFirstDatabase.ProductProductPhoto.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView5()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing ProductProductPhoto
        [CodeFirstDatabaseSchema.ProductProductPhoto](T1.ProductProductPhoto_ProductID, T1.ProductProductPhoto_ProductPhotoID)
    FROM (
        SELECT 
            T.ProductID AS ProductProductPhoto_ProductID, 
            T.ProductPhotoID AS ProductProductPhoto_ProductPhotoID, 
            True AS _from0
        FROM AdventureWorks.ProductProductPhotoes AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for CodeFirstDatabase.ProductPhoto.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView6()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing ProductPhoto
        [CodeFirstDatabaseSchema.ProductPhoto](T1.ProductPhoto_ProductPhotoID, T1.ProductPhoto_LargePhotoFileName, T1.ProductPhoto_ModifiedDate)
    FROM (
        SELECT 
            T.ProductPhotoID AS ProductPhoto_ProductPhotoID, 
            T.LargePhotoFileName AS ProductPhoto_LargePhotoFileName, 
            T.ModifiedDate AS ProductPhoto_ModifiedDate, 
            True AS _from0
        FROM AdventureWorks.ProductPhotos AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for AdventureWorks.ProductCategories.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView7()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing ProductCategories
        [Dixin.Linq.EntityFramework.ProductCategory](T1.ProductCategory_ProductCategoryID, T1.ProductCategory_Name)
    FROM (
        SELECT 
            T.ProductCategoryID AS ProductCategory_ProductCategoryID, 
            T.Name AS ProductCategory_Name, 
            True AS _from0
        FROM CodeFirstDatabase.ProductCategory AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for AdventureWorks.ProductSubcategories.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView8()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing ProductSubcategories
        [Dixin.Linq.EntityFramework.ProductSubcategory](T1.ProductSubcategory_ProductSubcategoryID, T1.ProductSubcategory_Name, T1.ProductSubcategory_ProductCategoryID)
    FROM (
        SELECT 
            T.ProductSubcategoryID AS ProductSubcategory_ProductSubcategoryID, 
            T.Name AS ProductSubcategory_Name, 
            T.ProductCategoryID AS ProductSubcategory_ProductCategoryID, 
            True AS _from0
        FROM CodeFirstDatabase.ProductSubcategory AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for AdventureWorks.Products.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView9()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing Products
        CASE
            WHEN (NOT(T1._from1) AND NOT(T1._from2) AND NOT(T1._from3)) THEN [Dixin.Linq.EntityFramework.Product](T1.Product_ProductID, T1.Product_RowVersion, T1.Product_Name, T1.Product_ListPrice, T1.Product_ProductSubcategoryID)
            WHEN T1._from1 THEN [Dixin.Linq.EntityFramework.MensProduct](T1.Product_ProductID, T1.Product_RowVersion, T1.Product_Name, T1.Product_ListPrice, T1.Product_ProductSubcategoryID)
            WHEN T1._from2 THEN [Dixin.Linq.EntityFramework.UniversalProduct](T1.Product_ProductID, T1.Product_RowVersion, T1.Product_Name, T1.Product_ListPrice, T1.Product_ProductSubcategoryID)
            ELSE [Dixin.Linq.EntityFramework.WomensProduct](T1.Product_ProductID, T1.Product_RowVersion, T1.Product_Name, T1.Product_ListPrice, T1.Product_ProductSubcategoryID)
        END
    FROM (
        SELECT 
            T.ProductID AS Product_ProductID, 
            T.RowVersion AS Product_RowVersion, 
            T.Name AS Product_Name, 
            T.ListPrice AS Product_ListPrice, 
            T.ProductSubcategoryID AS Product_ProductSubcategoryID, 
            True AS _from0, 
            CASE WHEN T.Style = N'M' THEN True ELSE False END AS _from1, 
            CASE WHEN T.Style = N'U' THEN True ELSE False END AS _from2, 
            CASE WHEN T.Style = N'W' THEN True ELSE False END AS _from3
        FROM CodeFirstDatabase.Product AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for AdventureWorks.ProductProductPhotoes.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView10()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing ProductProductPhotoes
        [Dixin.Linq.EntityFramework.ProductProductPhoto](T1.ProductProductPhoto_ProductID, T1.ProductProductPhoto_ProductPhotoID)
    FROM (
        SELECT 
            T.ProductID AS ProductProductPhoto_ProductID, 
            T.ProductPhotoID AS ProductProductPhoto_ProductPhotoID, 
            True AS _from0
        FROM CodeFirstDatabase.ProductProductPhoto AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for AdventureWorks.ProductPhotos.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView11()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing ProductPhotos
        [Dixin.Linq.EntityFramework.ProductPhoto](T1.ProductPhoto_ProductPhotoID, T1.ProductPhoto_LargePhotoFileName, T1.ProductPhoto_ModifiedDate)
    FROM (
        SELECT 
            T.ProductPhotoID AS ProductPhoto_ProductPhotoID, 
            T.LargePhotoFileName AS ProductPhoto_LargePhotoFileName, 
            T.ModifiedDate AS ProductPhoto_ModifiedDate, 
            True AS _from0
        FROM CodeFirstDatabase.ProductPhoto AS T
    ) AS T1");
        }
    }
}
