<style type="text/css">
    article.blog-post li {
        list-style: none;
    }

    article.blog-post ol {
        counter-reset: item;
        padding: 0px;
    }

        article.blog-post ol ol {
            padding-left: 40px;
        }

        article.blog-post ol li:before {
            content: "Chapter " counters(item, ".", upper-roman) " ";
            counter-increment: item;
        }

        article.blog-post ol ol li:before {
            content: "§ " counters(item, ".") " ";
        }

    article.blog-post h1 {
        display: inline;
    }

    article.blog-post h2 {
        display: inline;
    }

    article.blog-post ol ol ul li:before {
        content: normal;
        counter-increment: none;
    }

    article.blog-post ul li {
        list-style: disc;
    }
</style>
<p>This is a tutorial of LINQ technologies and functional programming in C# language. The contents was initially based on my <a href="http://weblogs.asp.net/dixin/archive/2009/09/21/linq-via-csharp-events-posters-design.aspx" target="_blank">LINQ via C# talks</a>. Hope it helps.</p>
<p><a href="$LinqViaCSharp7_Dixin_DesktopDesign.f[2].png"><img width="640" height="263" title="LinqViaCSharp7_Dixin_DesktopDesign.fw2.fw" style="border: 0px currentcolor; display: inline; background-image: none;" alt="LinqViaCSharp7_Dixin_DesktopDesign.fw2.fw" src="$LinqViaCSharp7_Dixin_DesktopDesign.f[1].png" border="0"></a></p>
<p>Please click <a href="https://weblogs.asp.net/dixin/linq-via-csharp-introduction" target="_blank">here</a> for full introduction of this tutorial. All code examples are available on <a href="https://github.com/Dixin/CodeSnippets/tree/master/Dixin/Linq" target="_blank">GitHub</a>.</p>
<p>Contents:</p>
<ol>
    <li>
        <h1><a href="https://weblogs.asp.net/dixin/Tags/Introducing%20LINQ" target="_blank">Introduction</a></h1>
        <ol>
            <li>
                <h2><a href="https://weblogs.asp.net/dixin/linq-via-csharp-introduction" target="_blank">Getting Started</a></h2>
                <ul>
                    <li>.NET Framework, C# and LINQ
                    <li>Functional programming
                    <li>This tutorial
                    <li>Code examples
                    <li>Author
                    <li>Tools</li>
                </ul>
            <li>
                <h2><a href="https://weblogs.asp.net/dixin/introducing-linq-2-linq" target="_blank">LINQ</a></h2>
                <ul>
                    <li>
                        One language for different data domains
                        <ul>
                            <li>LINQ to Objects
                            <li>Parallel LINQ
                            <li>LINQ to XML
                            <li>LINQ to DataSets
                            <li>LINQ to Entities
                            <li>LINQ to SQL
                            <li>LINQ to DocumentDB
                            <li>LINQ to JSON
                            <li>LINQ to Twitter</li>
                        </ul>
                    <li>Productivity
                    <li>Local query vs. remote query</li>
                </ul>
            <li>
                <h2><a href="https://weblogs.asp.net/dixin/introducing-linq-3-functional-programming" target="_blank">Functional Programming</a></h2>
                <ul>
                    <li>Programming paradigms
                    <li>Imperative vs. declarative
                    <li>Object-oriented vs. functional</li>
                </ul>
            </li>
        </ol>
    <li>
        <h1><a href="https://weblogs.asp.net/dixin/Tags/Functional%20C%23" target="_blank">Functional C#</a></h1>
        <ol>
            <li>
                <h2><a href="https://weblogs.asp.net/dixin/functional-csharp-1-fundamentals" target="_blank">Fundamentals</a></h2>
                <ul>
                    <li>Types and members
                    <li>Built-in types
                    <li>Static class
                    <li>Partial type
                    <li>Interface implementation
                    <li>
                        Generic type
                        <ul>
                            <li>Type parameter constraints</li>
                        </ul>
                    <li>Nullable value type
                    <li>IDisposable and using statement
                    <li>Auto property
                    <li>Property initializer
                    <li>Object initializer
                    <li>Collection initializer
                    <li>Index initializer
                    <li>Null coalescing operator
                    <li>Null conditional operator
                    <li>String interpolation
                    <li>nameof expression
                    <li>Expression bodied property-like function member</li>
                </ul>
            <li>
                <h2><a href="https://weblogs.asp.net/dixin/functional-csharp-2-function-type-and-delegate" target="_blank">Function Type and Delegate</a></h2>
                <ul>
                    <li>
                        Delegate type
                        <ul>
                            <li>Function type
                            <li>Generic delegate type
                            <li>Unified built-in delegate types</li>
                        </ul>
                    <li>
                        Delegate instance
                        <ul>
                            <li>Function
                            <li>Delegate class and delegate object
                            <li>Function group</li>
                        </ul>
                    <li>Index initializer</li>
                </ul>
            <li>
                <h2><a href="https://weblogs.asp.net/dixin/functional-csharp-3-named-function-and-method" target="_blank">Named Function and Method</a></h2>
                <ul>
                    <li>Function member and function member name
                    <li>Method overload and ad hoc polymorphism
                    <li>
                        Generic method and parametric polymorphism
                        <ul>
                            <li>Type argument inference</li>
                        </ul>
                    <li>Static vs. instance method
                    <li>Extension method
                    <li>Expression bodied function member
                    <li>Partial method
                    <li>using static directive</li>
                </ul>
            <li>
                <h2><a href="https://weblogs.asp.net/dixin/functional-csharp-4-anonymous-function-and-lambda-expression" target="_blank">Anonymous Function and Lambda Expression</a></h2>
                <ul>
                    <li>Anonymous method
                    <li>Lambda expression
                    <li>Call anonymous function
                    <li>Closure
                    <li>Implicit reference</li>
                </ul>
            <li>
                <h2><a href="https://weblogs.asp.net/dixin/functional-csharp-5-function-as-data-and-expression-tree" target="_blank">Function as Data and Expression Tree</a></h2>
                <ul>
                    <li>
                        Lambda expression as expression tree
                        <ul>
                            <li>Code as data
                            <li>.NET expressions</li>
                        </ul>
                    <li>
                        Compile expression tree at runtime
                        <ul>
                            <li>Traverse expression tree
                            <li>.NET built-in expression tree visitor
                            <li>Compile expression tree to IL at runtime
                            <li>Compile expression tree to executable method at runtime
                            <li>.NET built-in compiler
                            <li>Convert expression tree to other languages
                            <li>Decompile anonymous method to expression tree?</li>
                        </ul>
                    <li>Type inference of lambda expression</li>
                </ul>
            <li>
                <h2><a href="https://weblogs.asp.net/dixin/functional-csharp-6-higher-order-function-and-first-class-function" target="_blank">Higher-order Function and First Class Function</a></h2>
                <ul>
                    <li>First order and higher-order function
                    <li>Curry function
                    <li>=> associativity
                    <li>Partial apply function
                    <li>Uncurry function
                    <li>First-class function</li>
                </ul>
            <li>
                <h2><a href="https://weblogs.asp.net/dixin/functional-csharp-7-function-composition-and-method-chaining" target="_blank">Function Composition and Method Chaining</a></h2>
                <ul>
                    <li>Forward and backward composition
                    <li>Forward pipe
                    <li>
                        Fluent method chaining
                        <ul>
                            <li>Regular API design vs. fluent API design
                            <li>Fluent extension methods
                            <li>IEnumerable&lt;T&gt; and IQueryable&lt;T&gt; query methods
                            <li>Types implementing IEnumerable&lt;T&gt;</li>
                        </ul>
                    </li>
                </ul>
            <li>
                <h2><a href="https://weblogs.asp.net/dixin/functional-csharp-8-query-expression" target="_blank">Query Expression</a></h2>
                <ul>
                    <li>Syntax
                    <li>Compilation
                    <li>Query expression pattern
                    <li>Query expression vs. query method</li>
                </ul>
            <li>
                <h2><a href="https://weblogs.asp.net/dixin/functional-csharp-9-covariance-and-contravariance" target="_blank">Covariance and Contravariance</a></h2>
                <ul>
                    <li>Is-a relationship for inheritance
                    <li>
                        Non-generic delegate
                        <ul>
                            <li>Bind method to a delegate
                            <li>Covariance
                            <li>Contravariance
                            <li>Covariance and contravariance
                            <li>Invalid variance
                            <li>Is-a relationship of delegates</li>
                        </ul>
                    <li>
                        Generic delegate
                        <ul>
                            <li>The out and in keywords</li>
                        </ul>
                    <li>
                        Higher-order function
                        <ul>
                            <li>Variance of input
                            <li>Revisit covariance and contravariance
                            <li>Variances for higher-order function</li>
                        </ul>
                    <li>
                        Generic interface
                        <ul>
                            <li>Covariance
                            <li>Contravariance
                            <li>Covariance and contravariance
                            <li>Invariance
                            <li>Is-a relationship of generic interfaces</li>
                        </ul>
                    <li>
                        Array
                        <ul>
                            <li>Covariance
                            <li>Comments</li>
                        </ul>
                    <li>Compilation
                    <li>Variances in .NET</li>
                </ul>
            <li>
                <h2><a href="https://weblogs.asp.net/dixin/functional-csharp-10-immutability" target="_blank">Immutability</a></h2>
                <ul>
                    <li>Immutable data structure
                    <li>Immutable anonymous type
                    <li>Tuple</li>
                </ul>
            </li>
        </ol>
    <li>
        <h1><a href="https://weblogs.asp.net/dixin/Tags/LINQ%20to%20Objects" target="_blank">LINQ to Objects</a></h1>
        <ol>
            <li>
                <h2><a href="https://weblogs.asp.net/dixin/understanding-linq-to-objects-1-fluent-query" target="_blank">Fluent Query</a></h2>
                <ul>
                    <li>Regular API design vs. fluent API design
                    <li>Fluent extension methods
                    <li>IEnumerable&lt;T&gt; and IQueryable&lt;T&gt; query methods
                    <li>LINQ to Objects source sequences in .NET</li>
                </ul>
            <li>
                <h2><a href="https://weblogs.asp.net/dixin/understanding-linq-to-objects-2-query-methods-and-query-expressions" target="_blank">Query Methods and Query Expressions</a></h2>
                <ul>
                    <li>
                        Return a new IEnumerable&lt;T&gt; sequence
                        <ul>
                            <li>Generation: Empty , Range, Repeat, DefaultIfEmpty
                            <li>Filtering (restriction): Where, OfType, where
                            <li>Mapping (projection): Select, SelectMany, from, let, select
                            <li>Grouping: GroupBy, group, by, into
                            <li>
                                Join
                                <ul>
                                    <li>Inner join: Join, SelectMany, join, on, equals
                                    <li>Outer join: GroupJoin, join, into, on, equals
                                    <li>Cross join: SelectMany, Join, from select, join, on, equals</li>
                                </ul>
                            <li>Concatenation: Concat
                            <li>Set: Distinct, Union, Intersect, Except
                            <li>Convolution: Zip
                            <li>Partitioning: Take, Skip, TakeWhile, SkipWhile
                            <li>Ordering: OrderBy, ThenBy, OrderByDescending, ThenByDescending, Reverse, orderby, ascending, descending, into
                            <li>Conversion: Cast, AsEnumerable</li>
                        </ul>
                    <li>
                        Return a new collection
                        <ul>
                            <li>Conversion: ToArray, ToList, ToDictionary, ToLookup</li>
                        </ul>
                    <li>
                        Return a single value
                        <ul>
                            <li>Element: First, FirstOrDefault, Last, LastOrDefault, ElementAt, ElementAtOrDefault, Single, SingleOrDefault
                            <li>Aggregation: Aggregate, Count, LongCount, Min, Max, Sum, Average
                            <li>Quantifier: All, Any, Contains
                            <li>Equality: SequenceEqual</li>
                        </ul>
                    <li>Queries in other languages</li>
                </ul>
            <li>
                <h2><a href="https://weblogs.asp.net/dixin/understanding-linq-to-objects-3-iterator-pattern-and-foreach" target="_blank">Iterator Pattern and foreach</a></h2>
                <ul>
                    <li>Iteration pattern
                    <li>The foreach and in keywords
                    <li>
                        IEnumerable&lt;T&gt; and IEnumerator&lt;T&gt;
                        <ul>
                            <li>foreach loop vs. for loop
                            <li>Non-generic vs. generic sequence</li>
                        </ul>
                    <li>EnumerableAssert class</li>
                </ul>
            <li>
                <h2><a href="https://weblogs.asp.net/dixin/understanding-linq-to-objects-4-generator-and-yield" target="_blank">Generator and yeild</a></h2>
                <ul>
                    <li>Implement IEnumerable&lt;T&gt; and IEnumerator&lt;T&gt;
                    <li>Generate sequences and iterators
                    <li>The yield keyword
                    <li>Generator
                    <li>Iterator and generator in other languages</li>
                </ul>
            <li>
                <h2><a href="https://weblogs.asp.net/dixin/understanding-linq-to-objects-5-deferred-execution-lazy-evaluation-and-eager-evaluation" target="_blank">Deferred Execution, Lazy Evaluation and Eager Evaluation</a></h2>
                <ul>
                    <li>
                        Deferred execution vs. immediate execution
                        <ul>
                            <li>Cold IEnumerable&lt;T&gt; vs. hot IEnumerable&lt;T&gt;</li>
                        </ul>
                    <li>Lazy evaluation vs. eager evaluation</li>
                </ul>
            <li>
                <h2><a href="https://weblogs.asp.net/dixin/understanding-linq-to-objects-6-query-methods-implementation" target="_blank">Query Methods Implementation</a></h2>
                <ul>
                    <li>
                        Return a new collection
                        <ul>
                            <li>Conversion: ToArray, ToList, ToDictionary, ToLookup</li>
                        </ul>
                    <li>
                        Return a new IEnumerable&lt;T&gt; sequence
                        <ul>
                            <li>Conversion: Cast, AsEnumerable
                            <li>Generation: Empty , Range, Repeat, DefaultIfEmpty
                            <li>Filtering (restriction): Where, OfType
                            <li>Mapping (projection): Select, SelectMany
                            <li>Grouping: GroupBy
                            <li>Join: SelectMany, Join, GroupJoin
                            <li>Concatenation: Concat
                            <li>Set: Distinct, Union, Intersect, Except
                            <li>Convolution: Zip
                            <li>Partitioning: Take, Skip, TakeWhile, SkipWhile
                            <li>Ordering: OrderBy, ThenBy, OrderByDescending, ThenByDescending, Reverse</li>
                        </ul>
                    <li>
                        Return a single value
                        <ul>
                            <li>Element: First, FirstOrDefault, Last, LastOrDefault, ElementAt, ElementAtOrDefault, Single, SingleOrDefault
                            <li>Aggregation: Aggregate, Count, LongCount, Min, Max, Sum, Average
                            <li>Quantifier: All, Any, Contains
                            <li>Equality: SequenceEqual</li>
                        </ul>
                    </li>
                </ul>
            <li>
                <h2><a href="https://weblogs.asp.net/dixin/understanding-linq-to-objects-7-interactive-extensions-ix" target="_blank">Interactive Extensions (Ix)</a></h2>
                <ul>
                    <li>
                        Returns a new IEnumerable&lt;T&gt; sequence
                        <ul>
                            <li>Generation: Defer, Create, Return, Repeat
                            <li>Filtering: IgnoreElements, DistinctUntilChanged
                            <li>Mapping: SelectMany, Scan, Expand
                            <li>Concatenation: Concat, StartWith
                            <li>Set: Distinct
                            <li>Partitioning: TakeLast, SkipLast
                            <li>Conversion: Hide
                            <li>Buffering: Buffer, Share, Publish, Memoize
                            <li>Exception: Throw, Catch, Finally, OnErrorResumeNext, Retry
                            <li>Imperative: If, Case, Using, While, DoWhile, Generate, For
                            <li>Iteration: Do</li>
                        </ul>
                    <li>
                        Returns void
                        <ul>
                            <li>Iteration: ForEach</li>
                        </ul>
                    <li>
                        Returns a single value
                        <ul>
                            <li>Aggregation: Min, Max, MinBy, MaxBy
                            <li>Quantifiers: isEmpty</li>
                        </ul>
                    </li>
                </ul>
            <li>
                <h2><a href="http://weblogs.asp.net/dixin/understanding-linq-to-objects-8-more-useful-queries" target="_blank">More Useful Queries</a></h2>
                <ul>
                    <li>
                        Returns a new IEnumerable&lt;T&gt; sequence (deferred execution)
                        <ul>
                            <li>Generation: Create, RandomInt32, RandomDouble, FromValue, FromValues, EmptyIfNull
                            <li>Filtering: Timeout
                            <li>Concatenation: Join, Append, Prepend, AppendTo, PrependTo
                            <li>Partitioning: Subsequence
                            <li>Exception: Catch, Retry
                            <li>Comparison: OrderBy, OrderByDescending, ThenBy, ThenByDescending, GroupBy, Join, GroupJoin, Distinct, Union, Intersect, Except
                            <li>List: Insert, Remove, RemoveAll, RemoveAt</li>
                        </ul>
                    <li>
                        Returns a new collection
                        <ul>
                            <li>Comparison: ToDictionary, ToLookup</li>
                        </ul>
                    <li>
                        Returns a single value
                        <ul>
                            <li>List: IndexOf, LastIndexOf
                            <li>Aggregation: PercentileExclusive, PercentileInclusive, Percentile
                            <li>Quantifiers: IsNullOrEmpty, IsNotNullOrEmpty
                            <li>Comparison: Contains, SequenceEqual</li>
                        </ul>
                    <li>
                        Returns void
                        <ul>
                            <li>Iteration: ForEach</li>
                        </ul>
                    </li>
                </ul>
            </li>
        </ol>
    <li>
        <h1><a href="https://weblogs.asp.net/dixin/Tags/LINQ%20to%20XML" target="_blank">LINQ to XML</a></h1>
        <ol>
            <li>
                <h2><a href="https://weblogs.asp.net/dixin/linq-to-xml-1-modeling-xml" target="_blank">Modeling XML</a></h2>
                <ul>
                    <li>Imperative vs. declarative paradigm
                    <li>Classes, conversions and operators
                    <li>Read and deserialize XML
                    <li>Serialize and write XML
                    <li>Deferred construction</li>
                </ul>
            <li>
                <h2><a href="https://weblogs.asp.net/dixin/linq-to-xml-2-query-methods" target="_blank">Query Methods</a></h2>
                <ul>
                    <li>Navigation
                    <li>Ordering
                    <li>Comparison
                    <li>More useful queries
                    <li>XPath
                    <li>Generate XPath expression</li>
                </ul>
            <li>
                <h2><a href="https://weblogs.asp.net/dixin/linq-to-xml-3-manipulating-xml" target="_blank">Manipulating XML</a></h2>
                <ul>
                    <li>Clone
                    <li>Add, replace, delete, update, and events
                    <li>Annotation
                    <li>Validate with XSD
                    <li>Transform</li>
                </ul>
            </li>
        </ol>
    <li>
        <h1><a href="https://weblogs.asp.net/dixin/Tags/Parallel%20LINQ" target="_blank">Parallel LINQ</a></h1>
        <ol>
            <li>
                <h2><a href="https://weblogs.asp.net/dixin/parallel-linq-1-parallel-query-and-visualization" target="_blank">Parallel Query and Visualization</a></h2>
                <ul>
                    <li>Parallel LINQ classes and methods
                    <li>Parallel query vs. sequential query
                    <li>Execute parallel query
                    <li>
                        Visualize parallel query execution
                        <ul>
                            <li>Install and configure Concurrency Visualizer
                            <li>Visualize sequential and parallel LINQ queries
                            <li>Visualize chaining query methods</li>
                        </ul>
                    </li>
                </ul>
            <li>
                <h2><a href="https://weblogs.asp.net/dixin/parallel-linq-2-partitioning" target="_blank">Partitioning</a></h2>
                <ul>
                    <li>
                        Partitioning algorithms and load balancing
                        <ul>
                            <li>Range partitioning
                            <li>Stripped partitioning
                            <li>Hash partitioning
                            <li>Chunk partitioning</li>
                        </ul>
                    <li>
                        Implement custom partitioner
                        <ul>
                            <li>Static partitioner
                            <li>Dynamic partitioner</li>
                        </ul>
                    </li>
                </ul>
            <li>
                <h2><a href="https://weblogs.asp.net/dixin/parallel-linq-3-query-methods" target="_blank">Query Methods</a></h2>
                <ul>
                    <li>
                        Query settings
                        <ul>
                            <li>Cancellation
                            <li>Degree of parallelism
                            <li>Execution mode
                            <li>Merge the values</li>
                        </ul>
                    <li>
                        Ordering
                        <ul>
                            <li>Control the order
                            <li>Order and correctness
                            <li>Merge options matters
                            <li>Orderable partitioner</li>
                        </ul>
                    <li>
                        Aggregation
                        <ul>
                            <li>Commutativity, associativity and correctness
                            <li>Partition and merge</li>
                        </ul>
                    </li>
                </ul>
            <li>
                <h2><a href="https://weblogs.asp.net/dixin/parallel-linq-4-performance" target="_blank">Performance</a></h2>
                <ul>
                    <li>Sequential vs. parallel
                    <li>CPU bound vs. IO bound
                    <li>Conclusion</li>
                </ul>
            </li>
        </ol>
    <li>
        <h1><a href="https://weblogs.asp.net/dixin/Tags/Entity%20Framework" target="_blank">Entity Framework and LINQ to Entities</a></h1>
        <ol>
            <li>
                <h2><a href="https://weblogs.asp.net/dixin/entity-framework-and-linq-to-entities-1-iqueryable-t-and-remote-query" target="_blank">IQueryable&lt;T&gt; and Remote Query</a></h2>
                <ul>
                    <li>Remote query vs. local query
                    <li>Function vs. expression tree
                    <li>Trace SQL query execution</li>
                </ul>
            <li>
                <h2><a href="https://weblogs.asp.net/dixin/entity-framework-and-linq-to-entities-2-object-relational-mapping" target="_blank">Object-Relational Mapping</a></h2>
                <ul>
                    <li>Data types
                    <li>Database
                    <li>Tables</li>
                    <li>
                        Relationships
                        <ul>
                            <li>One-to-many
                            <li>Many-to-many</li>
                        </ul>
                    <li>Inheritance
                    <li>Views
                    <li>Stored procedures and functions</li>
                </ul>
            <li>
                <h2><a href="https://weblogs.asp.net/dixin/entity-framework-and-linq-to-entities-3-logging" target="_blank">Logging</a></h2>
                <ul>
                    <li>DbQuery&lt;T&gt;.ToString
                    <li>Database.Log
                    <li>IDbCommandInterceptor</li>
                </ul>
            <li>
                <h2><a href="https://weblogs.asp.net/dixin/entity-framework-and-linq-to-entities-4-query-methods" target="_blank">Query Methods</a></h2>
                <ul>
                    <li>
                        Return a new IEnumerable&lt;T&gt; sequence
                        <ul>
                            <li>Generation: DefaultIfEmpty
                            <li>Filtering (restriction): Where, OfType
                            <li>Mapping (projection): Select
                            <li>Grouping: GroupBy
                            <li>
                                Join
                                <ul>
                                    <li>Inner join: Join, SelectMany, GroupJoin, Select
                                    <li>Outer join: GroupJoin, Select, SelectMany
                                    <li>Cross join: SelectMany, Join
                                    <li>Self join: GroupJoin</li>
                                </ul>
                            <li>
                                Apply
                                <ul>
                                    <li>Cross apply: GroupBy, Join
                                    <li>Outer apply: GroupBy, Join</li>
                                </ul>
                            <li>Concatenation: Concat
                            <li>Set: Distinct, Union, Intersect, Except
                            <li>Partitioning: Take, Skip
                            <li>Ordering: OrderBy, ThenBy, OrderByDescending, ThenByDescending
                            <li>Conversion: Cast, AsQueryable</li>
                        </ul>
                    <li>
                        Return a single value
                        <ul>
                            <li>Element: First, FirstOrDefault, Single, SingleOrDefault
                            <li>Aggregation: Count, LongCount, Min, Max, Sum, Average
                            <li>Quantifier: All, Any, Contains</li>
                        </ul>
                    </li>
                </ul>
            <li>
                <h2><a href="https://weblogs.asp.net/dixin/entity-framework-and-linq-to-entities-5-query-translation" target="_blank">Query Translation</a></h2>
                <ul>
                    <li>
                        Code to expression tree
                        <ul>
                            <li>IQueryable&lt;T&gt; and IQueryProvider
                            <li>Queryable methods
                            <li>Build LINQ to Entities queries and expressions</li>
                        </ul>
                    <li>
                        Expression tree to database command tree
                        <ul>
                            <li>DbExpression and DbCommandTree
                            <li>Convert Expression to DbExpression
                            <li>Query methods translation
                            <li>.NET APIs translation
                            <li>Remote method call vs. local method call
                            <li>Database functions translation</li>
                        </ul>
                    <li>
                        Database command tree to SQL
                        <ul>
                            <li>DbExpressionVisitor&lt;TResultType&gt; and SqlGenerator
                            <li>Database command tree to SQL</li>
                        </ul>
                    <li>
                        Log the translation
                        <ul>
                            <li>DbProviderServices and SqlProviderServices
                            <li>Log database command tree</li>
                        </ul>
                    </li>
                </ul>
            <li>
                <h2><a href="https://weblogs.asp.net/dixin/entity-framework-and-linq-to-entities-6-deferred-execution-laziness-loading-and-eager-loading" target="_blank">Deferred Execution, Laziness Loading and Eager Loading</a></h2>
                <ul>
                    <li>
                        Deferred execution
                        <ul>
                            <li>Iterator pattern
                            <li>Lazy/eager evaluation</li>
                        </ul>
                    <li>
                        Lazy loading and eager loading
                        <ul>
                            <li>Implicit and explicit lazy loading
                            <li>Eager loading
                            <li>The N + 1 problem
                            <li>Disable lazy loading</li>
                        </ul>
                    </li>
                </ul>
            <li>
                <h2><a href="https://weblogs.asp.net/dixin/entity-framework-and-linq-to-entities-7-data-changes" target="_blank">Data Changes</a></h2>
                <ul>
                    <li>Repository pattern and unit of work pattern
                    <li>
                        Track entities and changes
                        <ul>
                            <li>Track entities
                            <li>Track entity changes and property changes
                            <li>Track association changes
                            <li>Disable tracking</li>
                        </ul>
                    <li>
                        Change data
                        <ul>
                            <li>Create
                            <li>Update
                            <li>Delete</li>
                        </ul>
                    </li>
                </ul>
            <li>
                <h2><a href="https://weblogs.asp.net/dixin/entity-framework-and-linq-to-entities-8-transactions" target="_blank">Transactions</a></h2>
                <ul>
                    <li>DbContextTransaction
                    <li>DbTransaction
                    <li>TransactionScope</li>
                </ul>
            <li>
                <h2><a href="https://weblogs.asp.net/dixin/entity-framework-and-linq-to-entities-9-optimistic-concurrency" target="_blank">Optimistic Concurrency</a></h2>
                <ul>
                    <li>Detect Concurrency conflicts
                    <li>
                        Resolve concurrency conflicts
                        <ul>
                            <li>Retain database values (database wins)
                            <li>Overwrite database values (client wins)
                            <li>Merge with database values</li>
                        </ul>
                    <li>SaveChanges with concurrency conflict handling</li>
                </ul>
            <li>
                <h2><a href="https://weblogs.asp.net/dixin/entity-framework-and-linq-to-entities-10-performance" target="_blank">Performance</a></h2>
                <ul>
                    <li>
                        Initialization
                        <ul>
                            <li>Provider manifest initialization
                            <li>Database initialization
                            <li>Mapping views initialization</li>
                        </ul>
                    <li>
                        Cache
                        <ul>
                            <li>Entity cache
                            <li>LINQ query translation cache
                            <li>SQL query plan cache</li>
                        </ul>
                    <li>
                        Asynchrony
                        <ul>
                            <li>Asynchronous data queries and changes
                            <li>Transactions with asynchronous operations
                            <li>Asynchronous concurrency conflicts</li>
                        </ul>
                    </li>
                </ul>
            </li>
        </ol>
    <li>
        <h1>LINQ to SQL</h1>
        <ol>
            <li>
                <h2><a href="http://weblogs.asp.net/dixin/archive/2010/03/29/understanding-linq-to-sql-1-object-relational-mapping.aspx" target="_blank">Object-Relational Mapping</a></h2>
                <ul>
                    <li>Create C# models from SQL schema
                    <li>Implement the mapping
                    <li>Customize the mapping
                    <li>
                        Work with model
                        <ul>
                            <li>Partial class
                            <li>Partial method
                            <li>INotifyPropertyChanging and INotifyPropertyChanged interfaces</li>
                        </ul>
                    <li>Create SQL schema from C# models</li>
                </ul>
            <li>
                <h2><a href="http://weblogs.asp.net/dixin/archive/2010/03/30/understanding-linq-to-sql-2-iqueryable-lt-t-gt.aspx" target="_blank">IQueryable&lt;T&gt;</a></h2>
                <ul>
                    <li>IQueryable and IQueryable&lt;T&gt;
                    <li>IQueryable and IQueryable&lt;T&gt; extensions
                    <li>Table&lt;T&gt;
                    <li>IEnumerable&lt;T&gt; extensions vs. IQueryable&lt;T&gt; extensions</li>
                </ul>
            <li>
                <h2><a href="http://weblogs.asp.net/dixin/archive/2010/04/06/understanding-linq-to-sql-3-expression-tree.aspx" target="_blank">Expression Tree</a></h2>
                <ul>
                    <li>Anonymous method vs. expression tree
                    <li>Expression tree for LINQ to SQL
                    <li>Translate expression tree to SQL
                    <li>Expression tree types
                    <li>Expression tree for DLR
                    <li>Visualize expression tree while debugging</li>
                </ul>
            <li>
                <h2><a href="http://weblogs.asp.net/dixin/archive/2010/04/15/understanding-linq-to-sql-4-data-retrieving-via-query-methods.aspx" target="_blank">Data Retrieving Via Query Methods</a></h2>
                <ul>
                    <li>Supported and Unsupported query methods
                    <li>
                        Restriction
                        <ul>
                            <li>WHERE
                            <li>AND / OR
                            <li>LIKE
                            <li>IN
                            <li>IS / NOT / NULL</li>
                        </ul>
                    <li>
                        Projection
                        <ul>
                            <li>SELECT
                            <li>Explicitly construct entity
                            <li>CASE</li>
                        </ul>
                    <li>
                        Ordering
                        <ul>
                            <li>ORDER BY / ASC / DESC</li>
                        </ul>
                    <li>
                        Join
                        <ul>
                            <li>Natural join
                            <li>INNER JOIN
                            <li>
                                OUTER JOIN
                                <ul>
                                    <li>Association</li>
                                </ul>
                            <li>CROSS JOIN
                            <li>Self JOIN</li>
                        </ul>
                    <li>
                        Grouping and aggregation
                        <ul>
                            <li>GROUP BY / aggregate functions
                            <li>HAVING</li>
                        </ul>
                    <li>
                        Set
                        <ul>
                            <li>DISTINCT
                            <li>UNION
                            <li>EXISTS
                            <li>NOT EXISTS</li>
                        </ul>
                    <li>
                        Partitioning
                        <ul>
                            <li>TOP
                            <li>ROW_NUMBER()
                            <li>BETWEEN … AND</li>
                        </ul>
                    <li>
                        Concatenation
                        <ul>
                            <li>UNION ALL</li>
                        </ul>
                    <li>
                        Qualifiers
                        <ul>
                            <li>CASE / EXISTS</li>
                        </ul>
                    <li>Other query methods</li>
                </ul>
            <li>
                <h2><a href="http://weblogs.asp.net/dixin/archive/2010/04/19/understanding-linq-to-sql-5-remote-and-local-method-call.aspx" target="_blank">Remote And Local Method Call</a></h2>
                <ul>
                    <li>Remote method call
                    <li>Local method call
                    <li>Remote method recognition</li>
                </ul>
            <li>
                <h2><a href="http://weblogs.asp.net/dixin/archive/2010/04/19/understanding-linq-to-sql-6-working-with-deferred-execution.aspx" target="_blank">Working With Deferred Execution</a></h2>
                <ul>
                    <li>Deferred execution and DataContext
                    <li>
                        Deferred execution and eager loading
                        <ul>
                            <li>DataLoadOptions.LoadWith()
                            <li>DataLoadOptions.AssociateWith()
                            <li>DataContext.DeferredLoadingEnabled</li>
                        </ul>
                    </li>
                </ul>
            <li>
                <h2><a href="http://weblogs.asp.net/dixin/archive/2010/04/20/understanding-linq-to-sql-7-data-changing.aspx" target="_blank">Data Changing</a></h2>
                <ul>
                    <li>
                        Object Identity
                        <ul>
                            <li>Identity of entity objects
                            <li>Identity and DataContext
                            <li>Identity of projected objects (non-entity objects)</li>
                        </ul>
                    <li>
                        Track changes
                        <ul>
                            <li>State change
                            <li>Association change
                            <li>Change set</li>
                        </ul>
                    <li>
                        Submit changes
                        <ul>
                            <li>
                                INSERT
                                <ul>
                                    <li>Work with IDENTITY column</li>
                                </ul>
                            <li>UPDATE
                            <li>DELETE</li>
                        </ul>
                    <li>Read-only DataContext</li>
                </ul>
            <li>
                <h2><a href="http://weblogs.asp.net/dixin/archive/2010/04/22/understanding-linq-to-sql-8-transaction.aspx" target="_blank" mce_href="/dixin/archive/2010/04/22/understanding-linq-to-sql-8-transaction.aspx">Transaction</a></h2>
                <ul>
                    <li>Implementing transaction (BEGIN / COMMIT / ROLLBACK)
                    <li>Default transaction
                    <li>Custom transactions</li>
                </ul>
            <li>
                <h2><a href="http://weblogs.asp.net/dixin/archive/2010/04/26/understanding-linq-to-sql-9-concurrent-conflict.aspx" target="_blank" mce_href="/dixin/archive/2010/04/26/understanding-linq-to-sql-9-concurrent-conflict.aspx">Concurrent conflict</a></h2>
                <ul>
                    <li>Conflicts in concurrent data access
                    <li>
                        Optimistic concurrency control
                        <ul>
                            <li>Update check
                            <li>Time stamp</li>
                        </ul>
                    <li>
                        Handle ChangeConflictException
                        <ul>
                            <li>Merge changes to resolve conflict</li>
                        </ul>
                    <li>More about concurrency</li>
                </ul>
            <li>
                <h2><a href="http://weblogs.asp.net/dixin/archive/2010/05/12/understanding-linq-to-sql-10-implementing-linq-to-sql-provider.aspx" target="_blank" mce_href="/dixin/archive/2010/05/12/understanding-linq-to-sql-10-implementing-linq-to-sql-provider.aspx">Implementing LINQ to SQL Provider</a></h2>
                <ul>
                    <li>
                        The provider model
                        <ul>
                            <li>Implement IQueryable&lt;T&gt; and IOrderedQueryable&lt;T&gt;
                            <li>Implement IQueryProvider</li>
                        </ul>
                    <li>
                        Query method internals
                        <ul>
                            <li>Deferred execution methods
                            <li>Eager execution methods</li>
                        </ul>
                    <li>
                        Work together
                        <ul>
                            <li>Query a collection of items (deferred execution)
                            <li>Query a single item (eager execution)
                            <li>Aggregate (eager execution)
                            <li>SQL translating and executing</li>
                        </ul>
                    <li>
                        LINQ Providers
                        <ul>
                            <li>Built-in IQueryable LINQ Providers
                            <li>LINQ to Everything
                            <li>LINQ to Objects provider</li>
                        </ul>
                    </li>
                </ul>
            <li>
                <h2><a href="http://weblogs.asp.net/dixin/archive/2011/01/31/understanding-linq-to-sql-11-performance.aspx" target="_blank" mce_href="/dixin/archive/2011/01/31/understanding-linq-to-sql-11-performance.aspx">Performance</a></h2>
                <ul>
                    <li>O/R mapping overhead
                    <li>
                        Data retrieving overhead
                        <ul>
                            <li>Compiled query
                            <li>Static SQL / stored procedures without translating</li>
                        </ul>
                    <li>
                        Data changing overhead
                        <ul>
                            <li>Bulk deleting / updating</li>
                        </ul>
                    <li>
                        Query plan overhead
                        <ul>
                            <li>.NET 3.5
                            <li>.NET 4.0</li>
                        </ul>
                    </li>
                </ul>
            </li>
        </ol>
    <li>
        <h1><a href="http://weblogs.asp.net/dixin/Tags/Lambda%20Calculus" target="_blank">Lambda Calculus</a></h1>
        <ol>
            <li>
                <h2><a href="http://weblogs.asp.net/dixin/lambda-calculus-via-c-sharp-1-fundamentals-closure-currying-and-partial-application" target="_blank">Fundamentals - Closure, Currying and Partial Application</a></h2>
                <ul>
                    <li>About lambda calculus (λ-calculus)
                    <li>
                        Closure
                        <ul>
                            <li>The referenced non-local variable can change</li>
                        </ul>
                    <li>Currying and partial application
                    <li>Uncurry
                    <li>=&gt; associativity</li>
                </ul>
            <li>
                <h2><a href="http://weblogs.asp.net/dixin/lambda-calculus-via-c-sharp-2-fundamentals-lambda-expression-variables-reductions" target="_blank">Fundamentals - Lambda Expression, Variables, Reductions</a></h2>
                <ul>
                    <li>Lambda expression
                    <li>Bound and free variables
                    <li>
                        Reductions
                        <ul>
                            <li>α-conversion / alpha-conversion
                            <li>β-reduction / beta-reduction
                            <li>η-conversion / eta-conversion</li>
                        </ul>
                    </li>
                </ul>
            <li>
                <h2><a href="http://weblogs.asp.net/dixin/lambda-calculus-via-c-sharp-3-fundamentals-function-composition" target="_blank">Fundamentals - Function composition</a></h2>
                <ul>
                    <li>
                        Function composition
                        <ul>
                            <li>Built-in operator in other languages</li>
                        </ul>
                    <li>
                        Properties
                        <ul>
                            <li>Associativity
                            <li>Unit</li>
                        </ul>
                    </li>
                </ul>
            <li>
                <h2><a href="http://weblogs.asp.net/dixin/lambda-calculus-via-c-sharp-4-encoding-church-booleans" target="_blank">Encoding Church Booleans</a></h2>
                <ul>
                    <li>Church encoding
                    <li>Church Booleans - True and False
                    <li>Unit test</li>
                </ul>
            <li>
                <h2><a href="http://weblogs.asp.net/dixin/lambda-calculus-via-c-sharp-5-boolean-logic" target="_blank">Boolean Logic</a></h2>
                <ul>
                    <li>And
                    <li>And
                    <li>Not
                    <li>Xor
                    <li>Conversion between Church Boolean and System.Boolean
                    <li>Unit Tests</li>
                </ul>
            <li>
                <h2><a href="http://weblogs.asp.net/dixin/lambda-calculus-via-c-sharp-6-if-logic-and-reduction-strategies" target="_blank">If Logic, And Reduction Strategies</a></h2>
                <ul>
                    <li>The first If
                    <li>
                        Reduction strategies
                        <ul>
                            <li>Normal order
                            <li>Applicative order</li>
                        </ul>
                    <li>Make If lazy
                    <li>Unit tests</li>
                </ul>
            <li>
                <h2><a href="http://weblogs.asp.net/dixin/lambda-calculus-via-c-sharp-7-encoding-church-numerals" target="_blank">Encoding Church Numerals</a></h2>
                <ul>
                    <li>Church numerals
                    <li>C# Implementation - starting from 0</li>
                </ul>
            <li>
                <h2><a href="http://weblogs.asp.net/dixin/lambda-calculus-via-c-sharp-9-wrapping-church-numerals-and-arithmetic" target="_blank">Church Numeral Arithmetic</a></h2>
                <ul>
                    <li>Increase
                    <li>Add
                    <li>Decrease and subtract</li>
                </ul>
            <li>
                <h2><a href="http://weblogs.asp.net/dixin/lambda-calculus-via-c-sharp-10-church-numeral-arithmetic-operators" target="_blank">Wrapping Church Numerals And Arithmetic</a></h2>
                <ul>
                    <li>Non-generic wrapper for Numeral&lt;T&gt;, and Increase
                    <li>Add
                    <li>Decrease and Subtract
                    <li>Multiply and Pow
                    <li>Divide?</li>
                </ul>
            <li>
                <h2><a href="http://weblogs.asp.net/dixin/lambda-calculus-via-c-sharp-10-church-numeral-arithmetic-operators" target="_blank">Church Numeral Arithmetic Operators</a></h2>
                <ul>
                    <li>Operators
                    <li>Conversion between Church numeral (now _Numeral) and System.UInt32
                    <li>Compare _Numeral and System.UInt32
                    <li>Unit tests</li>
                </ul>
            <li>
                <h2><a href="http://weblogs.asp.net/dixin/lambda-calculus-via-c-sharp-11-predicates-and-divide" target="_blank">Predicates, And Divide</a></h2>
                <ul>
                    <li>Predicates
                    <li>Divide</li>
                </ul>
            <li>
                <h2><a href="http://weblogs.asp.net/dixin/lambda-calculus-via-c-sharp-12-church-numeral-comparison-operators" target="_blank">Church Numeral Comparison Operators</a></h2>
                <ul>
                    <li>
                        Church Numeral Comparison Operators
                        <ul>
                            <li>C# object equality</li>
                        </ul>
                    <li>Unit tests</li>
                </ul>
            <li>
                <h2><a href="http://weblogs.asp.net/dixin/lambda-calculus-via-c-sharp-13-encoding-church-pairs-2-tuples-and-generic-church-booleans" target="_blank">Encoding Church Pairs (2-Tuples) and Generic Church Booleans</a></h2>
                <ul>
                    <li>Church pair (2-tuple)
                    <li>
                        Generic Church Booleans
                        <ul>
                            <li>Back to Church Boolean - why not using generic Church Booleans from the beginning?</li>
                        </ul>
                    <li>Currying and type inference</li>
                </ul>
            <li>
                <h2><a href="http://weblogs.asp.net/dixin/lambda-calculus-via-c-sharp-14-church-pair-2-tuple-and-church-numeral-decrease" target="_blank">Church Pair (2-Tuple) and Church Numeral Decrease</a></h2>
                <ul>
                    <li>Shift a Church Pair (2-Tuple)
                    <li>Decrease a Church numeral
                    <li>Unit tests</li>
                </ul>
            <li>
                <h2><a href="http://weblogs.asp.net/dixin/lambda-calculus-via-c-sharp-15-encoding-church-list-with-church-pair-and-null" target="_blank">Encoding Church List with Church Pair, And Null</a></h2>
                <ul>
                    <li>Church pair as a Church list node
                    <li>
                        Encoding Null, and IsNull predicate
                        <ul>
                            <li>Church Boolean as Null</li>
                        </ul>
                    <li>The improved Next
                    <li>Index
                    <li>Unit tests</li>
                </ul>
            <li>
                <h2><a href="http://weblogs.asp.net/dixin/lambda-calculus-via-c-sharp-16-encoding-church-list-with-2-church-pairs-as-a-node" target="_blank">Encoding Church List with 2 Church Pairs as a Node</a></h2>
                <ul>
                    <li>IsNull and Null
                    <li>Create, Value, and Next
                    <li>Index
                    <li>Unit tests</li>
                </ul>
            <li>
                <h2><a href="http://weblogs.asp.net/dixin/lambda-calculus-via-c-sharp-17-encoding-church-list-with-fold-aggregate-function" target="_blank">Encoding Church List with Fold (Aggregate) Function</a></h2>
                <ul>
                    <li>ListNode and wrapper
                    <li>Create, Null and IsNull
                    <li>Value and Next
                    <li>Index
                    <li>Unit tests</li>
                </ul>
            <li>
                <h2><a href="http://weblogs.asp.net/dixin/lambda-calculus-via-c-sharp-18-encoding-signed-number" target="_blank">Encoding Signed Number</a></h2>
                <ul>
                    <li>Create Signed number from Church numeral
                    <li>Format with 0
                    <li>Arithmetic
                    <li>Unit tests
                    <li>Another way to encode signed number</li>
                </ul>
            <li>
                <h2><a href="http://weblogs.asp.net/dixin/lambda-calculus-via-c-sharp-19-church-encoding-and-more" target="_blank">Church Encoding, And More</a></h2>
                <ul>
                    <li>
                        Church encoding
                        <ul>
                            <li>
                                Boolean
                                <ul>
                                    <li>Boolean logic
                                    <li>If logic</li>
                                </ul>
                            <li>
                                Numeral
                                <ul>
                                    <li>Arithmetic</li>
                                </ul>
                            <li>
                                Predicate
                                <ul>
                                    <li>Compari<sub></sub>son</li>
                                </ul>
                            <li>Pair (2-tuple)
                            <li>
                                List
                                <ul>
                                    <li>1 pair for each node, and null
                                    <li>2 pairs for each node, and null
                                    <li>Fold (aggregate) function for each node, and null</li>
                                </ul>
                            <li>
                                Signed number
                                <ul>
                                    <li>Arithmetic</li>
                                </ul>
                            </li>
                        </ul>
                    <li>
                        Encode, encode, and encode
                        <ul>
                            <li>From signed number to complex integer and rational number
                            <li>From rational number to real number and complex number
                            <li>And much more</li>
                        </ul>
                    </li>
                </ul>
            <li>
                <h2><a href="http://weblogs.asp.net/dixin/lambda-calculus-via-c-sharp-20-combinators" target="_blank">Combinators</a></h2>
                <ul>
                    <li>I combinator
                    <li>BCKW combinators
                    <li>ω combinator
                    <li>
                        SKI combinators
                        <ul>
                            <li>Boolean in SKI, and type issue</li>
                        </ul>
                    </li>
                </ul>
            <li>
                <h2><a href="http://weblogs.asp.net/dixin/lambda-calculus-via-c-sharp-21-ski-combinator-calculus" target="_blank">SKI Combinator Calculus</a></h2>
                <ul>
                    <li>I Combinator
                    <li>BCKW combinators
                    <li>ω combinator
                    <li>Function composition
                    <li>Booleans
                    <li>Numerals
                    <li>Unit tests</li>
                </ul>
            <li>
                <h2><a href="http://weblogs.asp.net/dixin/lambda-calculus-via-c-sharp-22-iota-combinator" target="_blank">Iota Combinator</a></h2>
                <ul>
                    <li>Completeness
                    <li>Unit tests</li>
                </ul>
            <li>
                <h2><a href="http://weblogs.asp.net/dixin/lambda-calculus-via-c-sharp-23-y-combinator-and-divide" target="_blank">Y Combinator, And Divide</a></h2>
                <ul>
                    <li>Fix point
                    <li>Fixed point combinator
                    <li>
                        Recursion
                        <ul>
                            <li>Example- factorial
                            <li>Example- Fibonacci</li>
                        </ul>
                    <li>Divide
                    <li>Unit tests</li>
                </ul>
            <li>
                <h2><a href="http://weblogs.asp.net/dixin/lambda-calculus-via-c-sharp-24-undecidability-of-equivalence" target="_blank">Undecidability of equivalence</a></h2>
                <ul>
                    <li>Equivalence and undecidability
                    <li>
                        Halting problem
                        <ul>
                            <li>Sequence, and reduction order
                            <li>IsHalting and IsNotHalting
                            <li>Proof</li>
                        </ul>
                    <li>Back to equivalence</li>
                </ul>
            </li>
        </ol>
    <li>
        <h1><a href="http://weblogs.asp.net/dixin/Tags/Category%20Theory" target="_blank">Category Theory</a></h1>
        <ol>
            <li>
                <h2><a href="https://weblogs.asp.net/dixin/category-theory-via-c-sharp-1-fundamentals-category-object-and-morphism" target="_blank">Fundamentals - Category, Object And Morphism</a></h2>
                <ul>
                    <li>Category and category laws
                    <li>The .NET category and morphism</li>
                </ul>
            <li>
                <h2><a href="https://weblogs.asp.net/dixin/category-theory-via-c-sharp-2-monoid" target="_blank">Monoid</a></h2>
                <ul>
                    <li>Monoid and monoid laws
                    <li>
                        C#/.NET monoids
                        <ul>
                            <li>Void and Unit monoids
                            <li>More examples
                            <li>Nullable&lt;T&gt; monoid</li>
                        </ul>
                    <li>Unit tests</li>
                </ul>
            <li>
                <h2><a href="https://weblogs.asp.net/dixin/category-theory-via-c-sharp-3-monoid-as-category" target="_blank">Monoid as Category</a></h2>
                <ul>
                    <li>One monoid, one category
                    <li>Category laws, and unit tests</li>
                </ul>
            <li>
                <h2><a href="https://weblogs.asp.net/dixin/category-theory-via-c-sharp-4-functor-and-ienumerable" target="_blank">Functor And IEnumerable&lt;&gt;</a></h2>
                <ul>
                    <li>Functor and functor laws
                    <li>
                        C#/.NET functors
                        <ul>
                            <li>Endofunctor
                            <li>Kind issue of C# language/CLR
                            <li>The built-in IEnumerable&lt;&gt; functor</li>
                        </ul>
                    <li>Functor pattern of LINQ
                    <li>IEnumerable&lt;&gt;, functor laws, and unit tests</li>
                </ul>
            <li>
                <h2><a href="https://weblogs.asp.net/dixin/category-theory-via-c-sharp-5-more-functors-lazy-func-and-nullable" target="_blank">More Functors: Lazy&lt;&gt;, Func&lt;&gt; And Nullable&lt;&gt;</a></h2>
                <ul>
                    <li>Lazy&lt;&gt; functor
                    <li>
                        Func&lt;&gt; functor
                        <ul>
                            <li>Fun&lt; , &gt; functor</li>
                        </ul>
                    <li>Nullable&lt;&gt; functor
                    <li>Functor laws, laziness, and unit tests</li>
                </ul>
            <li>
                <h2><a href="https://weblogs.asp.net/dixin/category-theory-via-c-sharp-6-functor-like-tuple-task-and-iqueryable" target="_blank">Functor-like Tuple&lt;&gt;, Task&lt;&gt; And IQueryable&lt;&gt;</a></h2>
                <ul>
                    <li>
                        Tuple&lt;&gt; is like a functor
                        <ul>
                            <li>Tuple&lt; , &gt; is also like a functor</li>
                        </ul>
                    <li>Laziness vs. eagerness
                    <li>Task&lt;T&gt; is like a functor too
                    <li>
                        Purity vs. impurity
                        <ul>
                            <li>Purity and category theory</li>
                        </ul>
                    <li>
                        Purity, laziness and LINQ
                        <ul>
                            <li>Functor vs. functor-like</li>
                        </ul>
                    <li>IQueryable&lt;&gt; is also like a functor
                    <li>Hot task vs. cold task, and unit tests</li>
                </ul>
            <li>
                <h2><a href="https://weblogs.asp.net/dixin/category-theory-via-c-sharp-7-natural-transformation" target="_blank">Natural Transformation</a></h2>
                <ul>
                    <li>Natural transformation
                    <li>Natural transformations for LINQ
                    <li>Unit tests</li>
                </ul>
            <li>
                <h2><a href="https://weblogs.asp.net/dixin/category-theory-via-c-sharp-8-functor-category" target="_blank">Functor Category</a></h2>
                <ul>
                    <li>Functor Category
                    <li>Endofunctor category
                    <li>Monoid laws for endofunctor category, and unit tests</li>
                </ul>
            <li>
                <h2><a href="https://weblogs.asp.net/dixin/category-theory-via-c-sharp-9-bifunctor" target="_blank">Bifunctor</a></h2>
                <ul>
                    <li>Bifunctor
                    <li>C#/.NET bifunctor
                    <li>Unit tests</li>
                </ul>
            <li>
                <h2><a href="https://weblogs.asp.net/dixin/category-theory-via-c-sharp-10-monoidal-category" target="_blank">Monoidal Category</a></h2>
                <ul>
                    <li>Monoidal category
                    <li>DotNet category is monoidal category</li>
                </ul>
            <li>
                <h2><a href="https://weblogs.asp.net/dixin/category-theory-via-c-sharp-11-monoidal-functor-and-ienumerable" target="_blank">Monoidal Functor And IEnumerable&lt;&gt;</a></h2>
                <ul>
                    <li>Monoidal functor
                    <li>C#/.NET lax monoidal endofunctors
                    <li>
                        IEnumerable&lt;&gt; monoidal functor
                        <ul>
                            <li>N-arity selector for functor
                            <li>Binary vs. Apply</li>
                        </ul>
                    <li>Monoidal functor and LINQ
                    <li>Applicative functor
                    <li>Applicative laws, and unit tests</li>
                </ul>
            <li>
                <h2><a href="https://weblogs.asp.net/dixin/category-theory-via-c-sharp-12-more-monoidal-functors-lazy-func-and-nullable" target="_blank">More Monoidal Functors: Lazy&lt;&gt;, Func&lt;&gt; And Nullable&lt;&gt;</a></h2>
                <ul>
                    <li>Lazy&lt;&gt; monoidal functor
                    <li>Func&lt;&gt; monoidal functor
                    <li>Nullable&lt;&gt; monoidal functor
                    <li>Unit tests</li>
                </ul>
            <li>
                <h2><a href="https://weblogs.asp.net/dixin/category-theory-via-c-sharp-13-monoidal-functor-like-tuple-and-task" target="_blank">Monoidal Functor-like Tuple&lt;&gt; And Task&lt;&gt;</a></h2>
                <ul>
                    <li>Tuple&lt;&gt;: lack of laziness
                    <li>Task&lt;&gt;: lack of purity
                    <li>Unit tests</li>
                </ul>
            <li>
                <h2><a href="https://weblogs.asp.net/dixin/category-theory-via-c-sharp-14-monad-and-ienumerable" target="_blank">Monad And IEnumerable&lt;&gt;</a></h2>
                <ul>
                    <li>Monad and monad laws
                    <li>C#/.NET monads
                    <li>
                        IEnumerable&lt;&gt; monad and SelectMany
                        <ul>
                            <li>IEnumerable&lt;&gt; monad (SelectMany) is monoid
                            <li>IEnumerable&lt;&gt; monad (SelectMany) is monoidal functor
                            <li>IEnumerable&lt;&gt; monad (SelectMany) is functor</li>
                        </ul>
                    <li>Monad pattern of LINQ
                    <li>Monad laws, and unit test</li>
                </ul>
            <li>
                <h2><a href="https://weblogs.asp.net/dixin/category-theory-via-c-sharp-15-ienumerable-monad-and-linq-selectmany-for-all" target="_blank">IEnumerable&lt;&gt; Monad And LINQ: SelectMany For All</a></h2>
                <ul>
                    <li>
                        Query methods implemented by SelectMany
                        <ul>
                            <li>Query methods in LINQ syntax</li>
                        </ul>
                    <li>Unit tests</li>
                </ul>
            <li>
                <h2><a href="https://weblogs.asp.net/dixin/category-theory-via-c-sharp-16-more-monads-lazy-func-nullable-parallelquery-and-iobservale" target="_blank">More Monads: Lazy&lt;&gt;, Func&lt;&gt;, Nullable&lt;&gt;, ParallelQuery&lt;&gt; And IObservale&lt;&gt;</a></h2>
                <ul>
                    <li>Lazy&lt;&gt; monad
                    <li>Func&lt;&gt; monad
                    <li>Nullable&lt;&gt; monad
                    <li>ParallelQuery&lt;&gt; monad
                    <li>IObservable&lt;&gt; monad
                    <li>
                        Unit tests<!--EndFragment-->
                    </li>
                </ul>
            <li>
                <h2><a href="https://weblogs.asp.net/dixin/category-theory-via-c-sharp-17-monad-like-tuple-task-iqueryable-and-iqbservable" target="_blank">Monad-like Tuple&lt;&gt;, Task&lt;&gt;, IQueryable&lt;&gt; And IQbservable&lt;&gt;</a></h2>
                <ul>
                    <li>Tuple&lt;&gt;: lack of laziness
                    <li>
                        Task&lt;&gt;: lack of purity
                        <ul>
                            <li>Task&lt;&gt; and LINQ
                            <li>Non-generic Task</li>
                        </ul>
                    <li>IQueryable&lt;&gt; is like a monad
                    <li>IQbservable&lt;&gt; is also like a monad
                    <li>Unit tests</li>
                </ul>
            <li>
                <h2><a href="https://weblogs.asp.net/dixin/category-theory-via-c-sharp-18-more-monad-io-monad" target="_blank">More Monad: IO&lt;&gt; Monad</a></h2>
                <ul>
                    <li>IO&lt;T&gt; and impurity
                    <li>IO&lt;&gt; monad
                    <li>Monad laws, and unit tests</li>
                </ul>
            <li>
                <h2><a href="https://weblogs.asp.net/dixin/category-theory-via-c-sharp-19-more-monad-state-monad" target="_blank">More Monad: State&lt; , &gt; Monad</a></h2>
                <ul>
                    <li>C#/.NET state machines
                    <li>
                        State pattern in object-oriented programming
                        <ul>
                            <li>Traffic light state machine</li>
                        </ul>
                    <li>
                        State&lt;&gt; monad
                        <ul>
                            <li>Traffic light state machine with State&lt;&gt; monad and LINQ
                            <li>Immutable IEnumerable&lt;T&gt; stack</li>
                        </ul>
                    <li>Monad laws, and unit tests</li>
                </ul>
            <li>
                <h2><a href="https://weblogs.asp.net/dixin/category-theory-via-c-sharp-20-more-monad-reader-monad" target="_blank">More Monad: Reader&lt; , &gt; Monad</a></h2>
                <ul>
                    <li>Reader&lt; , &gt; Monad
                    <li>Monad laws, and unit tests</li>
                </ul>
            <li>
                <h2><a href="https://weblogs.asp.net/dixin/category-theory-via-c-sharp-21-more-monad-writer-monad" target="_blank">More Monad: Writer&lt; , &gt; Monad</a></h2>
                <ul>
                    <li>Writer&lt; , &gt; monad
                    <li>Monad laws, and unit tests</li>
                </ul>
            <li>
                <h2><a href="https://weblogs.asp.net/dixin/category-theory-via-c-sharp-22-more-monad-continuation-monad" target="_blank">More Monad: Continuation Monad</a></h2>
                <ul>
                    <li>Continuation and continuation-passing style
                    <li>Continuation monad
                    <li>Monad laws, and unit tests</li>
                </ul>
            <li>
                <h2><a href="https://weblogs.asp.net/dixin/category-theory-via-c-sharp-23-knowing-the-cost" target="_blank">Performance</a></h2>
                <ul>
                    <li>
                        Cost of purely functional
                        <ul>
                            <li>Sort array
                            <li>Prepare to test
                            <li>Performance tests</li>
                        </ul>
                    <li>
                        Cost of functional and monad
                        <ul>
                            <li>Filter IEnumerable&lt;T&gt;
                            <li>Performance tests</li>
                        </ul>
                    <li>
                        Cost of lambda
                        <ul>
                            <li>Filter array
                            <li>Performance tests</li>
                        </ul>
                    <li>Conclusion</li>
                </ul>
            </li>
        </ol>
    </li>
</ol>
<p>This list will be updated when more contents are created.</p>
